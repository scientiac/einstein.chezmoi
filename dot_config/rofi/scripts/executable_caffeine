#!/usr/bin/env bash
set -e

# Configuration
declare -A DISPLAY_NAMES=(
    ["10m"]="10 Minutes"
    ["30m"]="30 Minutes"
    ["1h"]="1 Hour"
    ["indefinite"]="Indefinite"
    ["reenable"]="Re-enable"
)

OPTIONS=("10m" "30m" "1h" "indefinite" "reenable")
SWAYIDLE_SERVICE="swayidle.service"
TIMER_FILE="/tmp/caffeine_swayidle_timer"
STATE_FILE="/tmp/caffeine_state"

get_current_state() {
    local state="none"
    
    if [[ -f "$STATE_FILE" ]]; then
        state=$(cat "$STATE_FILE")
    fi
    
    # Validate indefinite state
    if [[ "$state" == "indefinite" && -f "$TIMER_FILE" ]]; then
        local timer_pid=$(cat "$TIMER_FILE")
        if ! kill -0 "$timer_pid" 2>/dev/null; then
            state="none"
            rm -f "$TIMER_FILE"
            echo "none" > "$STATE_FILE"
        fi
    elif [[ "$state" == "indefinite" ]]; then
        state="none"
        echo "none" > "$STATE_FILE"
    fi
    
    echo "$state"
}

is_swayidle_active() {
    systemctl --user is-active "$SWAYIDLE_SERVICE" &>/dev/null
}

display_menu() {
    local current_state=$(get_current_state)
    local swayidle_active=$(is_swayidle_active && echo "true" || echo "false")
    
    for option in "${OPTIONS[@]}"; do
        local display="${DISPLAY_NAMES[$option]}"
        
        if [[ "$option" == "reenable" ]]; then
            # Show re-enable if swayidle is inactive or caffeine is active
            if [[ "$swayidle_active" == "false" || "$current_state" != "none" ]]; then
                echo "$display"
            fi
        elif [[ "$option" == "$current_state" ]]; then
            echo "$display (active)"
        else
            echo "$display"
        fi
    done
}

disable_swayidle() {
    if is_swayidle_active; then
        systemctl --user stop "$SWAYIDLE_SERVICE" || {
            notify-send -u critical "Caffeine Error" "Failed to disable $SWAYIDLE_SERVICE."
            return 1
        }
    fi
}

enable_swayidle() {
    # Clean up state
    rm -f "$TIMER_FILE"
    echo "none" > "$STATE_FILE"
    
    if ! is_swayidle_active; then
        systemctl --user start "$SWAYIDLE_SERVICE" || {
            notify-send -u critical "Caffeine Error" "Failed to re-enable $SWAYIDLE_SERVICE."
            return 1
        }
    fi
}

cleanup_previous_timer() {
    if [[ -f "$TIMER_FILE" ]]; then
        local timer_pid=$(cat "$TIMER_FILE")
        kill "$timer_pid" 2>/dev/null || true
        rm -f "$TIMER_FILE"
    fi
}

start_timer() {
    local duration="$1"
    local state="$2"
    local message="$3"
    
    # Use nohup to completely detach the process
    nohup bash -c "
        echo '$state' > '$STATE_FILE'
        notify-send 'Caffeine' '$message'
        sleep $duration
        systemctl --user start '$SWAYIDLE_SERVICE' 2>/dev/null || true
        rm -f '$TIMER_FILE'
        echo 'none' > '$STATE_FILE'
    " >/dev/null 2>&1 &
    
    echo $! > "$TIMER_FILE"
}

start_indefinite() {
    nohup bash -c "
        echo 'indefinite' > '$STATE_FILE'
        notify-send 'Caffeine' 'Swayidle disabled indefinitely.'
        sleep infinity
    " >/dev/null 2>&1 &
    
    echo $! > "$TIMER_FILE"
}

handle_selection() {
    local selected="$1"
    # Remove "(active)" suffix
    selected=$(echo "$selected" | sed 's/ (active)//')
    
    local option=""
    for opt in "${OPTIONS[@]}"; do
        if [[ "${DISPLAY_NAMES[$opt]}" == "$selected" ]]; then
            option="$opt"
            break
        fi
    done
    
    if [[ -z "$option" ]]; then
        notify-send -u critical "Caffeine Error" "Unknown option: '$selected'"
        return 1
    fi
    
    case "$option" in
        "reenable")
            enable_swayidle
            ;;
        "indefinite")
            cleanup_previous_timer
            if disable_swayidle; then
                start_indefinite
            fi
            ;;
        *)
            cleanup_previous_timer
            if disable_swayidle; then
                local duration="$option"
                local message="Swayidle disabled for ${DISPLAY_NAMES[$option]}."
                start_timer "$duration" "$option" "$message"
            fi
            ;;
    esac
}

# Main logic
if [[ "$#" -eq 0 ]]; then
    display_menu
else
    handle_selection "$1"
fi
